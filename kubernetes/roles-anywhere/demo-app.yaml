apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: roles-anywhere-cert
  namespace: roles-anywhere-demo
spec:
  secretName: roles-anywhere-tls
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  commonName: roles-anywhere-demo
  subject:
    organizations:
    - Example Organization
  issuerRef:
    name: aws-pca-cluster-issuer
    kind: AWSPCAClusterIssuer
    group: awspca.cert-manager.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: roles-anywhere-demo
  namespace: roles-anywhere-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: roles-anywhere-demo
  template:
    metadata:
      labels:
        app: roles-anywhere-demo
    spec:
      containers:
      - name: aws-cli
        image: amazon/aws-cli:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for certificate to be ready..."
          while [ ! -f /certs/tls.crt ] || [ ! -f /certs/tls.key ]; do
            sleep 5
          done
          
          echo "Certificate is ready. Using IAM Roles Anywhere to get credentials..."
          
          # Use the certificate to get temporary credentials
          CREDS=$(aws rolesanywhere get-credentials \
            --private-key-file /certs/tls.key \
            --certificate-file /certs/tls.crt \
            --trust-anchor-arn ${TRUST_ANCHOR_ARN} \
            --profile-arn ${PROFILE_ARN} \
            --role-arn ${APP_ROLE_ARN} \
            --region ${REGION})
          
          # Extract and set the credentials
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.credentials.accessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.credentials.secretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.credentials.sessionToken')
          
          # Test the credentials by listing S3 buckets
          echo "Listing S3 buckets using the temporary credentials:"
          aws s3 ls
          
          # Keep the container running
          sleep infinity
        volumeMounts:
        - name: cert-volume
          mountPath: /certs
          readOnly: true
      volumes:
      - name: cert-volume
        secret:
          secretName: roles-anywhere-tls