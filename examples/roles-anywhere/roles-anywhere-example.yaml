apiVersion: v1
kind: Namespace
metadata:
  name: roles-anywhere-example
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: roles-anywhere-cert
  namespace: roles-anywhere-example
spec:
  secretName: roles-anywhere-tls
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  commonName: roles-anywhere-app
  subject:
    organizations:
    - Example Organization
    countries:
    - US
  issuerRef:
    name: aws-pca-cluster-issuer
    kind: AWSPCAClusterIssuer
    group: awspca.cert-manager.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: roles-anywhere-script
  namespace: roles-anywhere-example
data:
  get-credentials.sh: |
    #!/bin/bash
    set -e

    echo "Waiting for certificate to be ready..."
    while [ ! -f /certs/tls.crt ] || [ ! -f /certs/tls.key ]; do
      sleep 5
    done
    
    echo "Certificate is ready. Using IAM Roles Anywhere to get credentials..."
    
    # Use the certificate to get temporary credentials
    CREDS=$(aws rolesanywhere get-credentials \
      --private-key-file /certs/tls.key \
      --certificate-file /certs/tls.crt \
      --trust-anchor-arn ${TRUST_ANCHOR_ARN} \
      --profile-arn ${PROFILE_ARN} \
      --role-arn ${ROLE_ARN} \
      --region ${AWS_REGION})
    
    # Extract and set the credentials
    export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.credentials.accessKeyId')
    export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.credentials.secretAccessKey')
    export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.credentials.sessionToken')
    
    # Save credentials to a file that can be sourced by other containers
    echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > /credentials/aws-credentials
    echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> /credentials/aws-credentials
    echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> /credentials/aws-credentials
    
    # Print expiration time
    EXPIRATION=$(echo $CREDS | jq -r '.credentials.expiration')
    echo "Credentials will expire at: $EXPIRATION"
    
    # Keep the credentials fresh by renewing them before they expire
    while true; do
      # Sleep until 5 minutes before expiration
      EXPIRATION_SECONDS=$(date -d "$EXPIRATION" +%s)
      NOW_SECONDS=$(date +%s)
      SLEEP_SECONDS=$((EXPIRATION_SECONDS - NOW_SECONDS - 300))
      
      if [ $SLEEP_SECONDS -gt 0 ]; then
        echo "Sleeping for $SLEEP_SECONDS seconds before renewing credentials"
        sleep $SLEEP_SECONDS
      fi
      
      echo "Renewing credentials..."
      CREDS=$(aws rolesanywhere get-credentials \
        --private-key-file /certs/tls.key \
        --certificate-file /certs/tls.crt \
        --trust-anchor-arn ${TRUST_ANCHOR_ARN} \
        --profile-arn ${PROFILE_ARN} \
        --role-arn ${ROLE_ARN} \
        --region ${AWS_REGION})
      
      export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.credentials.accessKeyId')
      export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.credentials.secretAccessKey')
      export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.credentials.sessionToken')
      
      echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > /credentials/aws-credentials
      echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> /credentials/aws-credentials
      echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> /credentials/aws-credentials
      
      EXPIRATION=$(echo $CREDS | jq -r '.credentials.expiration')
      echo "Credentials renewed. Will expire at: $EXPIRATION"
    done
---
apiVersion: v1
kind: Pod
metadata:
  name: roles-anywhere-app
  namespace: roles-anywhere-example
spec:
  volumes:
  - name: cert-volume
    secret:
      secretName: roles-anywhere-tls
  - name: credentials-volume
    emptyDir: {}
  - name: script-volume
    configMap:
      name: roles-anywhere-script
      defaultMode: 0755
  initContainers:
  - name: credentials-init
    image: amazon/aws-cli:latest
    command:
    - /bin/bash
    - -c
    - /scripts/get-credentials.sh
    env:
    - name: TRUST_ANCHOR_ARN
      value: TRUST_ANCHOR_ARN_PLACEHOLDER # Will be replaced by the script
    - name: PROFILE_ARN
      value: PROFILE_ARN_PLACEHOLDER # Will be replaced by the script
    - name: ROLE_ARN
      value: ROLE_ARN_PLACEHOLDER # Will be replaced by the script
    - name: AWS_REGION
      value: REGION_PLACEHOLDER # Will be replaced by the script
    volumeMounts:
    - name: cert-volume
      mountPath: /certs
      readOnly: true
    - name: credentials-volume
      mountPath: /credentials
    - name: script-volume
      mountPath: /scripts
  containers:
  - name: aws-cli
    image: amazon/aws-cli:latest
    command:
    - /bin/bash
    - -c
    - |
      source /credentials/aws-credentials
      echo "Testing AWS credentials by listing S3 buckets:"
      aws s3 ls
      
      echo "Creating a demo file in S3:"
      echo "Hello from IAM Roles Anywhere!" > /tmp/hello.txt
      aws s3 cp /tmp/hello.txt s3://BUCKET_NAME_PLACEHOLDER/hello.txt || echo "Upload failed - read-only access"
      
      echo "Credentials are working. Sleeping to keep the pod running..."
      sleep infinity
    volumeMounts:
    - name: credentials-volume
      mountPath: /credentials
      readOnly: true
  - name: credential-refresher
    image: amazon/aws-cli:latest
    command:
    - /bin/bash
    - -c
    - /scripts/get-credentials.sh
    env:
    - name: TRUST_ANCHOR_ARN
      value: TRUST_ANCHOR_ARN_PLACEHOLDER # Will be replaced by the script
    - name: PROFILE_ARN
      value: PROFILE_ARN_PLACEHOLDER # Will be replaced by the script
    - name: ROLE_ARN
      value: ROLE_ARN_PLACEHOLDER # Will be replaced by the script
    - name: AWS_REGION
      value: REGION_PLACEHOLDER # Will be replaced by the script
    volumeMounts:
    - name: cert-volume
      mountPath: /certs
      readOnly: true
    - name: credentials-volume
      mountPath: /credentials
    - name: script-volume
      mountPath: /scripts